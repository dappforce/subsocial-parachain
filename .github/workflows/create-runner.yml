name: Manage self-hosted runner for build actions
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options: [ 'Create', 'Delete' ]
  workflow_run:
    workflows: [ "Build a new docker image" ]
    types: [ requested, completed ]

jobs:
  create-runner:
    if: github.event.inputs.action == 'Create' || github.event.workflow_run.status != 'completed'
    name: Create self-hosted runner for build actions
    runs-on: ubuntu-20.04
    steps:
      - name: Skip if self-hosted runner exists
        id: skip
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_PAT}}
          script: |
            const runner = await github.actions.listSelfHostedRunnersForRepo({
              repo: context.repo.repo,
              owner: context.repo.owner
            })
            if (runner.data.runners.length > 0) {
              console.debug(`Self-hosted runner already exists`)
              process.exit(1)
            }

      - name: Get runner configuration token
        uses: actions/github-script@v3
        id: token
        with:
          github-token: ${{secrets.GH_PAT}}
          result-encoding: string
          script: |
            const runner = await github.actions.createRegistrationTokenForRepo({
              repo: context.repo.repo,
              owner: context.repo.owner
            })
            const fs = require('fs')
            fs.writeFileSync('mask.sh', `echo "::add-mask::${runner.data.token}"`, 'utf-8')
            return runner.data.token

      - name: Masking token
        run: |
          chmod +x mask.sh
          ./mask.sh
          rm mask.sh

      - name: Prepare installation script
        run: |
          rm init.sh || true
          version=$(curl --silent "https://api.github.com/repos/actions/runner/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

          echo "apt update" >> init.sh
          echo "apt install -y apt-transport-https ca-certificates curl software-properties-common" >> init.sh
          echo "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -" >> init.sh
          echo "add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable'" >> init.sh
          echo "apt update" >> init.sh
          echo "apt install -y docker-ce" >> init.sh
          echo "apt install -y docker-compose" >> init.sh

          echo "adduser --disabled-password --gecos '' runner" >> init.sh
          echo "usermod -aG docker runner" >> init.sh
          echo "usermod -aG sudo runner" >> init.sh
          echo "echo \"runner ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers" >> init.sh

          echo "curl -O -L \"https://github.com/actions/runner/releases/download/${version}/actions-runner-linux-x64-${version:1}.tar.gz\"" >> init.sh
          echo "tar xzf actions-runner-linux-x64-${version:1}.tar.gz -C /home/runner" >> init.sh
          echo "rm actions-runner-linux-x64-${version:1}.tar.gz" >> init.sh
          echo "/home/runner/bin/installdependencies.sh" >> init.sh

          echo "su -c \"/home/runner/config.sh --unattended --url https://github.com/${{github.repository}} --token ${{steps.token.outputs.result}}\" -s /bin/sh runner" >> init.sh
          echo "su -c \"cd /home/runner/; sudo ./svc.sh install runner\" -s /bin/sh runner" >> init.sh
          echo "su -c \"cd /home/runner/; sudo ./svc.sh start\" -s /bin/sh runner" >> init.sh

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Create ephemeral ssh-key
        run: |
          rm build-runner build-runner.pub || true
          ssh-keygen -q -t rsa -b 4096 -C "build-runner" -N "" -f build-runner

      - name: Create droplet
        run: |
          ssh=$(doctl compute ssh-key import build-runner --public-key-file build-runner.pub --no-header --format FingerPrint)
          droplet_ip="$(doctl compute droplet create build-runner \
            --image ubuntu-20-04-x64 \
            --region ams3 \
            --size c-16 \
            --ssh-keys "$ssh" \
            --wait \
            --format PublicIPv4 \
            --no-header)"
          echo "::add-mask::$droplet_ip"

          doctl compute ssh-key delete "$ssh" --force

          sleep 15
          mkdir -p ~/.ssh
          ssh-keyscan $droplet_ip > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run installation script
        run: |
          doctl compute ssh build-runner --ssh-key-path build-runner --ssh-command "bash -s" < init.sh

      - name: Remove droplet on failure
        if: failure() && steps.skip.outcome == 'success'
        run: |
          doctl compute droplet delete build-runner --force

      - name: Remove artifacts
        run: |
          rm build-runner build-runner.pub init.sh || true

  delete-runner:
    if: github.event.inputs.action == 'Delete' || github.event.workflow_run.conclusion == 'success'
    name: Delete self-hosted runner for build actions
    runs-on: ubuntu-20.04
    steps:
      - name: Remove runner from repository
        uses: actions/github-script@v3
        id: token
        with:
          github-token: ${{secrets.GH_PAT}}
          result-encoding: string
          script: |
            const runner = await github.actions.listSelfHostedRunnersForRepo({
              repo: context.repo.repo,
              owner: context.repo.owner
            })
            const runner_id = runner.data.runners[0].id
            console.debug(`Deleting runner ${runner_id}`)
            await github.actions.deleteSelfHostedRunnerFromRepo({
              repo: context.repo.repo,
              owner: context.repo.owner,
              runner_id: runner_id
            })
            return runner_id

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Remove droplet
        run: |
          doctl compute droplet delete build-runner --force
