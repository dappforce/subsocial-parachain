//! Autogenerated weights for pallet_domains
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./scripts/../target/release/subsocial-node
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// Compiled
// --pallet
// pallet_domains
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages
// 4096
// --output
// ./pallets/domains/src/weights.rs
// --template
// ./.maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_domains.
pub trait WeightInfo {
    fn register_domain() -> Weight;
    fn set_inner_value() -> Weight;
    fn set_outer_value() -> Weight;
    fn set_domain_content() -> Weight;
    fn reserve_domains(s: u32, ) -> Weight;
    fn add_tlds(s: u32, ) -> Weight;
}

/// Weights for pallet_domains using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
            // Storage: Domains ReservedDomains (r:1 w:0)
            // Storage: Domains SupportedTlds (r:1 w:0)
            // Storage: Domains RegisteredDomains (r:1 w:1)
            // Storage: Timestamp Now (r:1 w:0)
            // Storage: Domains RegisteredDomainsByOwner (r:1 w:1)
        fn register_domain() -> Weight {
        (70_030_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
        }
            // Storage: Domains RegisteredDomains (r:1 w:1)
        fn set_inner_value() -> Weight {
        (34_428_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: Domains RegisteredDomains (r:1 w:1)
        fn set_outer_value() -> Weight {
        (54_371_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: Domains RegisteredDomains (r:1 w:1)
        fn set_domain_content() -> Weight {
        (34_288_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: Domains ReservedDomains (r:0 w:1)
        fn reserve_domains(s: u32, ) -> Weight {
        (15_188_000 as Weight)
            // Standard Error: 10_000
            .saturating_add((2_354_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
            // Storage: Domains SupportedTlds (r:0 w:1)
        fn add_tlds(s: u32, ) -> Weight {
        (21_307_000 as Weight)
            // Standard Error: 14_000
            .saturating_add((2_541_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
    }

    // For backwards compatibility and tests
    impl WeightInfo for () {
            // Storage: Domains ReservedDomains (r:1 w:0)
            // Storage: Domains SupportedTlds (r:1 w:0)
            // Storage: Domains RegisteredDomains (r:1 w:1)
            // Storage: Timestamp Now (r:1 w:0)
            // Storage: Domains RegisteredDomainsByOwner (r:1 w:1)
        fn register_domain() -> Weight {
        (70_030_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(5 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
        }
            // Storage: Domains RegisteredDomains (r:1 w:1)
        fn set_inner_value() -> Weight {
        (34_428_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: Domains RegisteredDomains (r:1 w:1)
        fn set_outer_value() -> Weight {
        (54_371_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: Domains RegisteredDomains (r:1 w:1)
        fn set_domain_content() -> Weight {
        (34_288_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: Domains ReservedDomains (r:0 w:1)
        fn reserve_domains(s: u32, ) -> Weight {
        (15_188_000 as Weight)
            // Standard Error: 10_000
            .saturating_add((2_354_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
            // Storage: Domains SupportedTlds (r:0 w:1)
        fn add_tlds(s: u32, ) -> Weight {
        (21_307_000 as Weight)
            // Standard Error: 14_000
            .saturating_add((2_541_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
        }
    }
