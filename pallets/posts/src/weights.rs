
//! Autogenerated weights for pallet_posts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
    // ./scripts/../target/release/subsocial-collator
    // benchmark
    // pallet
    // --chain
    // dev
    // --execution
    // wasm
    // --wasm-execution
    // Compiled
    // --pallet
    // pallet_posts
    // --extrinsic
    // *
    // --steps
    // 50
    // --repeat
    // 20
    // --heap-pages
    // 4096
    // --output
    // pallets/posts/src/weights.rs
    // --template
    // ./.maintain/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(non_snake_case)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_posts.
pub trait WeightInfo {
    fn create_post__regular() -> Weight;
    fn create_post__shared() -> Weight;
    fn create_post__comment() -> Weight;
    fn update_post() -> Weight;
    fn move_post() -> Weight;
}

/// Weights for pallet_posts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
            // Storage: Posts NextPostId (r:1 w:1)
            // Storage: Timestamp Now (r:1 w:0)
            // Storage: Spaces SpaceById (r:1 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:1 w:0)
            // Storage: Posts PostIdsBySpaceId (r:1 w:1)
            // Storage: Posts PostById (r:0 w:1)
        fn create_post__regular() -> Weight {
        // Minimum execution time: 30_000 nanoseconds.
        Weight::from_ref_time(47_502_000)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
        }
            // Storage: Posts NextPostId (r:1 w:1)
            // Storage: Timestamp Now (r:1 w:0)
            // Storage: Spaces SpaceById (r:1 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:1 w:0)
            // Storage: Posts PostById (r:1 w:1)
            // Storage: Posts SharedPostIdsByOriginalPostId (r:1 w:1)
            // Storage: Posts PostIdsBySpaceId (r:1 w:1)
        fn create_post__shared() -> Weight {
        // Minimum execution time: 39_000 nanoseconds.
        Weight::from_ref_time(62_353_000)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(4))
        }
            // Storage: Posts NextPostId (r:1 w:1)
            // Storage: Timestamp Now (r:1 w:0)
            // Storage: Posts PostById (r:2 w:1)
            // Storage: Spaces SpaceById (r:1 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:1 w:0)
            // Storage: Posts ReplyIdsByPostId (r:1 w:1)
        fn create_post__comment() -> Weight {
        // Minimum execution time: 39_000 nanoseconds.
        Weight::from_ref_time(59_771_000)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(3))
        }
            // Storage: Posts PostById (r:2 w:1)
            // Storage: Spaces SpaceById (r:1 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:1 w:0)
        fn update_post() -> Weight {
        // Minimum execution time: 30_000 nanoseconds.
        Weight::from_ref_time(48_472_000)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(1))
        }
            // Storage: Posts PostById (r:1 w:1)
            // Storage: Spaces SpaceById (r:2 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:2 w:0)
            // Storage: Posts PostIdsBySpaceId (r:2 w:2)
        fn move_post() -> Weight {
        // Minimum execution time: 39_000 nanoseconds.
        Weight::from_ref_time(60_733_000)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(3))
        }
    }

    // For backwards compatibility and tests
    impl WeightInfo for () {
            // Storage: Posts NextPostId (r:1 w:1)
            // Storage: Timestamp Now (r:1 w:0)
            // Storage: Spaces SpaceById (r:1 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:1 w:0)
            // Storage: Posts PostIdsBySpaceId (r:1 w:1)
            // Storage: Posts PostById (r:0 w:1)
        fn create_post__regular() -> Weight {
        // Minimum execution time: 30_000 nanoseconds.
        Weight::from_ref_time(47_502_000)
            .saturating_add(RocksDbWeight::get().reads(5))
            .saturating_add(RocksDbWeight::get().writes(3))
        }
            // Storage: Posts NextPostId (r:1 w:1)
            // Storage: Timestamp Now (r:1 w:0)
            // Storage: Spaces SpaceById (r:1 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:1 w:0)
            // Storage: Posts PostById (r:1 w:1)
            // Storage: Posts SharedPostIdsByOriginalPostId (r:1 w:1)
            // Storage: Posts PostIdsBySpaceId (r:1 w:1)
        fn create_post__shared() -> Weight {
        // Minimum execution time: 39_000 nanoseconds.
        Weight::from_ref_time(62_353_000)
            .saturating_add(RocksDbWeight::get().reads(7))
            .saturating_add(RocksDbWeight::get().writes(4))
        }
            // Storage: Posts NextPostId (r:1 w:1)
            // Storage: Timestamp Now (r:1 w:0)
            // Storage: Posts PostById (r:2 w:1)
            // Storage: Spaces SpaceById (r:1 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:1 w:0)
            // Storage: Posts ReplyIdsByPostId (r:1 w:1)
        fn create_post__comment() -> Weight {
        // Minimum execution time: 39_000 nanoseconds.
        Weight::from_ref_time(59_771_000)
            .saturating_add(RocksDbWeight::get().reads(7))
            .saturating_add(RocksDbWeight::get().writes(3))
        }
            // Storage: Posts PostById (r:2 w:1)
            // Storage: Spaces SpaceById (r:1 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:1 w:0)
        fn update_post() -> Weight {
        // Minimum execution time: 30_000 nanoseconds.
        Weight::from_ref_time(48_472_000)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(1))
        }
            // Storage: Posts PostById (r:1 w:1)
            // Storage: Spaces SpaceById (r:2 w:0)
            // Storage: SpaceFollows SpaceFollowedByAccount (r:2 w:0)
            // Storage: Posts PostIdsBySpaceId (r:2 w:2)
        fn move_post() -> Weight {
        // Minimum execution time: 39_000 nanoseconds.
        Weight::from_ref_time(60_733_000)
            .saturating_add(RocksDbWeight::get().reads(7))
            .saturating_add(RocksDbWeight::get().writes(3))
        }
    }
