// Copyright (C) DAPPFORCE PTE. LTD.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0.
//
// Full notice is available at https://github.com/dappforce/subsocial-parachain/blob/main/COPYRIGHT
// Full license is available at https://github.com/dappforce/subsocial-parachain/blob/main/LICENSE


//! Autogenerated weights for pallet_post_follows
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmarks-ci`, CPU: `Intel(R) Xeon(R) Platinum 8358 CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/subsocial-collator
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet
// pallet_post_follows
// --extrinsic
// *
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --output=pallets/post-follows/src/weights.rs
// --template=./.maintain/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(non_snake_case)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_post_follows.
pub trait WeightInfo {
    fn follow_post() -> Weight;
    fn unfollow_post() -> Weight;
}

/// Weights for pallet_post_follows using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: PostFollows PostFollowedByAccount (r:1 w:1)
    /// Proof Skipped: PostFollows PostFollowedByAccount (max_values: None, max_size: None, mode: Measured)
    /// Storage: Posts PostById (r:1 w:0)
    /// Proof Skipped: Posts PostById (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostFollowers (r:1 w:1)
    /// Proof Skipped: PostFollows PostFollowers (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostsFollowedByAccount (r:1 w:1)
    /// Proof Skipped: PostFollows PostsFollowedByAccount (max_values: None, max_size: None, mode: Measured)
    fn follow_post() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `294`
        //  Estimated: `15036`
        // Minimum execution time: 34_526_000 picoseconds.
        Weight::from_parts(35_644_000, 15036)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Posts PostById (r:1 w:0)
    /// Proof Skipped: Posts PostById (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostFollowedByAccount (r:1 w:1)
    /// Proof Skipped: PostFollows PostFollowedByAccount (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostsFollowedByAccount (r:1 w:1)
    /// Proof Skipped: PostFollows PostsFollowedByAccount (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostFollowers (r:1 w:1)
    /// Proof Skipped: PostFollows PostFollowers (max_values: None, max_size: None, mode: Measured)
    fn unfollow_post() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `444`
        //  Estimated: `15636`
        // Minimum execution time: 40_205_000 picoseconds.
        Weight::from_parts(40_977_000, 15636)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: PostFollows PostFollowedByAccount (r:1 w:1)
    /// Proof Skipped: PostFollows PostFollowedByAccount (max_values: None, max_size: None, mode: Measured)
    /// Storage: Posts PostById (r:1 w:0)
    /// Proof Skipped: Posts PostById (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostFollowers (r:1 w:1)
    /// Proof Skipped: PostFollows PostFollowers (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostsFollowedByAccount (r:1 w:1)
    /// Proof Skipped: PostFollows PostsFollowedByAccount (max_values: None, max_size: None, mode: Measured)
    fn follow_post() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `294`
        //  Estimated: `15036`
        // Minimum execution time: 34_526_000 picoseconds.
        Weight::from_parts(35_644_000, 15036)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    /// Storage: Posts PostById (r:1 w:0)
    /// Proof Skipped: Posts PostById (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostFollowedByAccount (r:1 w:1)
    /// Proof Skipped: PostFollows PostFollowedByAccount (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostsFollowedByAccount (r:1 w:1)
    /// Proof Skipped: PostFollows PostsFollowedByAccount (max_values: None, max_size: None, mode: Measured)
    /// Storage: PostFollows PostFollowers (r:1 w:1)
    /// Proof Skipped: PostFollows PostFollowers (max_values: None, max_size: None, mode: Measured)
    fn unfollow_post() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `444`
        //  Estimated: `15636`
        // Minimum execution time: 40_205_000 picoseconds.
        Weight::from_parts(40_977_000, 15636)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
}